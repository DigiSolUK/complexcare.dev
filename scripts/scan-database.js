// scripts/scan-database.js
import { neon } from "@neondatabase/serverless"

// Function to get the first available database URL from a list of env vars
function getDatabaseUrl() {
  console.log("Attempting to find database URL from environment variables for scan-database.js...")
  const possibleEnvVars = [
    "DATABASE_URL",
    "POSTGRES_URL",
    "production_DATABASE_URL", // Specifically for Vercel production
    "production_POSTGRES_URL", // Specifically for Vercel production
    "DATABASE_URL_UNPOOLED",
    "POSTGRES_URL_NON_POOLING",
    "production_DATABASE_URL_UNPOOLED", // Vercel production
    "production_POSTGRES_URL_NON_POOLING", // Vercel production
    "NEON_DATABASE_URL", // A guess
    "AUTH_DATABASE_URL", // From system prompt list
  ]

  for (const envVar of possibleEnvVars) {
    const value = process.env[envVar]
    let displayValue = "NOT SET"
    if (value && value.trim() !== "") {
      displayValue = value.length > 60 ? value.substring(0, 60) + "..." : value
    }
    console.log(`- Checking env var: ${envVar} = ${displayValue}`)

    if (value && value.trim() !== "") {
      console.log(`✅ Using database connection string from environment variable: ${envVar}`)
      return value
    }
  }

  console.error("❌ Critical Error: No suitable database connection string found for Neon client.")
  console.error("Checked for:", possibleEnvVars.join(", "))
  throw new Error("Database connection string not found.")
}

async function listAllEnvVarsForScan() {
  console.log("\n--- LISTING ALL AVAILABLE process.env KEYS (scan-database.js) ---")
  const envKeys = Object.keys(process.env).sort()
  if (envKeys.length === 0) {
    console.log("No environment variables found in process.env.")
  } else {
    console.log("Available keys:", envKeys.join(", "))
    const commonKeys = [
      "VERCEL_ENV",
      "NODE_ENV",
      "DATABASE_URL",
      "POSTGRES_URL",
      "production_DATABASE_URL",
      "production_POSTGRES_URL",
    ]
    console.log("\n--- Values for some common/expected keys (scan-database.js) ---")
    commonKeys.forEach((key) => {
      if (process.env[key]) {
        const value = process.env[key]
        const displayValue = value.length > 60 ? value.substring(0, 60) + "..." : value
        console.log(`- ${key} = ${displayValue}`)
      } else {
        console.log(`- ${key} = NOT SET`)
      }
    })
  }
  console.log("--- END LISTING ENV KEYS (scan-database.js) ---\n")
}

async function scanDatabase() {
  await listAllEnvVarsForScan()

  let dbUrl
  try {
    dbUrl = getDatabaseUrl()
  } catch (error) {
    console.error(error.message)
    console.log("\nDatabase scan cannot proceed without a database URL.")
    return
  }

  const sql = neon(dbUrl)
  console.log("Neon client initialized. Scanning database schema...")

  try {
    const tableResult = await sql`
      SELECT tablename
      FROM pg_catalog.pg_tables
      WHERE schemaname = 'public';
    `
    const tableNames = tableResult.map((row) => row.tablename)

    if (tableNames.length === 0) {
      console.warn("No tables found in the 'public' schema.")
      return
    }

    console.log(`Found ${tableNames.length} tables. Generating schema document...`)
    // ... (rest of the markdown generation logic remains the same)
    let markdownContent = `# Database Schema Overview (Public Schema)\n\n`
    markdownContent += `This document was auto-generated by scanning the database.\n\n---\n\n`

    for (const tableName of tableNames) {
      markdownContent += `## Table: \`${tableName}\`\n\n`

      const columnResult = await sql`
        SELECT
          column_name,
          data_type,
          is_nullable,
          column_default,
          udt_name -- More specific type name
        FROM information_schema.columns
        WHERE table_name = ${tableName} AND table_schema = 'public'
        ORDER BY ordinal_position;
      `

      markdownContent += `| Column Name | Data Type (UDT) | Nullable | Default Value |\n`
      markdownContent += `|-------------|-----------------|----------|---------------|\n`

      for (const column of columnResult) {
        markdownContent += `| \`${column.column_name}\` | \`${column.data_type}\` (\`${column.udt_name}\`) | ${column.is_nullable === "YES" ? "Yes" : "No"} | ${column.column_default ? `\`${column.column_default}\`` : "NULL"} |\n`
      }
      markdownContent += `\n`
    }

    console.log("\n--- SCHEMA MARKDOWN START ---\n")
    console.log(markdownContent)
    console.log("\n--- SCHEMA MARKDOWN END ---\n")

    console.log("✅ Database schema scan completed. Results are logged above.")
  } catch (error) {
    console.error("❌ Error during database scan:", error.message)
    if (error.stack) {
      console.error("Stack Trace:", error.stack)
    }
  }
}

scanDatabase()
